#pragma once

#include <vector>

/**
 * @brief Структура узла (Node) для алгоритма A*.
 *
 * Этот класс представляет собой узел в сетке, используемый алгоритмом A* для поиска кратчайшего пути.
 */
struct Node {
    int x;  /**< Координата x узла. */
    int y;  /**< Координата y узла. */
    int g{0};   /**< Стоимость пути от начального узла до текущего узла. */
    int h{0};   /**< Cтоимость пути от текущего узла до конечного узла. */
    int f{0};   /**< Общая стоимость пути (f = g + h). */

    /**
     * @brief Оператор сравнения для узлов.
     *
     * Используется при работе с приоритетной очередью для сравнения узлов по общей стоимости пути.
     *
     * @param o Узел для сравнения.
     * @return true, если текущий узел имеет большую общую стоимость пути, чем узел o; false в противном случае.
     */
    bool operator<(const Node &o) const { return f > o.f; }

    /**
     * @brief Оператор равенства для узлов.
     *
     * Проверяет, равны ли координаты двух узлов.
     *
     * @param other Узел для сравнения.
     * @return true, если координаты узлов равны; false в противном случае.
     */
    bool operator==(const Node &other) const {
        return x == other.x && y == other.y;
    }
};

/**
 * @brief Алгоритм A* для поиска кратчайшего пути.
 *
 * Использует алгоритм A* для поиска кратчайшего пути от начального узла до конечного узла на сетке с блокировками.
 *
 * @param grid Сетка, представляющая блокировки ячеек. Значение true означает заблокированную ячейку.
 * @param start Начальный узел пути.
 * @param end Конечный узел пути.
 * @return Вектор узлов, представляющий найденный путь. Если путь не найден, возвращается пустой вектор.
 */
std::vector<Node> a_star_search(const std::vector<std::vector<bool> > &grid, const Node& start, const Node& end);
